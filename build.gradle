/**
!!! HEY THERE !!!
Remeber to replace the token on line 40 with the encrypted text down below

Base64: 0HUxb31zMQw5gJmluYWTE7skqRnLMRS9ezEyL16Bdj7w2DX30a3uP/Hk+YI9okX1
Hex: D075316F7D73310C398099A5B9859313BB24A919CB3114BD7B31322F5E81763EF0D835F7D1ADEE3FF1E4F9823DA245F5

Decryption information down below
Algorithm: AES256
Padding: PKCS7
Key: 31415926535897932384626433832795

Why do I have to encrypt this???
Because of github and I don`t want to do a hell lot of work to set this token in my enviroment varibles

 */

// Stuffs for threading
import java.io.*;
import java.util.*;

//////////////////////////////////////////
// Init
plugins {
    id("java");
    id("application");
};

sourceSets {
    main {
        java {
            srcDir("src/java");
        };

        resources {
            srcDir("src/resources");
        };
    };
};

version = "1.0a-SNAPSHOT";

final String CORE_ARGS = "-saveDir=\"${buildDir}/saves\" -plugDir=\"${buildDir}/libs\" -confDir=\"${rootDir}/configs\" -repoDir=\"${rootDir}/reports\" -uuid=114514";
final String CORE_VERSION = "1.2.8a-SNAPSHOT";
final String MAIN_CLASS = "top.example.Main";


//////////////////////////////////////////
// Build & run
repositories {
    mavenCentral();
    maven { url("https://maven.pkg.github.com/Sob1234509876/Omni-com"); credentials {username = "Sob1234509876"; password = "Enter the decypted token"; }; };
};

dependencies {
    implementation("top.sob:core:${CORE_VERSION}");
};

application {
    mainClass = "${MAIN_CLASS}";
};

jar {
    manifest {
        attributes(
            "Main-Class" : "${MAIN_CLASS}"
        );
    };
};

//////////////////////////////////////////

task copyDependJar(type: Copy) {
        from(configurations.runtimeClasspath);
        into("tmp");
};

/** Reads the output of core */
class outputReadThread extends Thread {

    protected final Process p;

    public outputReadThread(Process p) {
        super();
        this.p = p;
    }

    @Override
    public void run() {
        BufferedReader isr = this.p.inputReader();
        String tmp;
        try {

            println("Flag1 from output thread");

            while((tmp = isr.readLine()) != null) {
                println(tmp);
            }

            println("");

            isr.close();

        } catch(IOException error) {
            error.printStackTrace();
            System.exit(1);
        }
    }
}

/** Reads the error output of core */
class errorReadThread extends Thread {
    protected final Process p;

    public errorReadThread(Process p) {
        super();
        this.p = p;
    }

    @Override
    public void run() {
        BufferedReader isr = this.p.errorReader();
        String tmp;
        try {

            println("Flag1 from error thread");

            while((tmp = isr.readLine()) != null) {
                println(tmp);
            }
            isr.close();

            println("");

        } catch(IOException error) {
            error.printStackTrace();
            System.exit(1);
        }
    }
}

// Actually just runs two threads for getting the outputs
// (including error outputs, discluding log file output)
tasks.register("runByCore") {
    group = "application";
    description = "Runs the core";

    // First build then copy the core jar for running
    dependsOn(tasks.build);
    dependsOn(tasks.copyDependJar);

    doLast {

        final String CORE_RUN_CMD = "java -jar \"${rootDir}/tmp/core-${CORE_VERSION}.jar\" ${CORE_ARGS} ";
        final Process proc = Runtime.getRuntime().exec(CORE_RUN_CMD);

        outputReadThread ort = new outputReadThread(proc);
        errorReadThread ert = new errorReadThread(proc);

        ort.start();
        ert.start();

        ort.join();
        ert.join();
    };

};